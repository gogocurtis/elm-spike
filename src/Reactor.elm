module Reactor exposing (update, view, init, subscriptions, location2messages, delta2url)

import Html exposing (div, text, a, h1, img, map)
import Html.Attributes exposing (href, style, src, alt)
import Html.Events as E
import Debug as D exposing (log)
import RouteUrl as Routing
import Navigation
import Dict
import Array
import Empty as EmptyView
import Customers as CustomersView
import Ribbon exposing (defaultConfig)
import Css
import Css.Colors
import Html.Styled as St
import Html.Styled.Attributes as Sa exposing (css)
import Layout

import Msg exposing(Msg(..))
import SignIn as SignInView



type alias CustomerModel =
    { list : List String
    }


type alias EmptyModel =
    {}


type alias AccountModel =
    { name : String}


type alias Model =
    { customersModel : CustomerModel
    , ordersModel : EmptyModel
    , inventoryModel : EmptyModel
    , selectedTab : Int
    , accountModel : Maybe AccountModel
    }


model =
    { customersModel = CustomerModel [ "joe", "sue", "betty", "wilma", "frank" ]
    , ordersModel = EmptyModel
    , inventoryModel = EmptyModel
    , selectedTab = 0
    , accountModel = Nothing
    }



--
-- Init establishes the basic data structure.
--


init =
    let
        c =
            D.log "function" "init"
    in
        ( model
        , Cmd.none
        )



-- Update is a triggered by a Msg which represents
-- a particular side-effect generated by an actor
--


update msg model =
    let
        a =
            D.log "model" model

        b =
            D.log "msg" msg

        c =
            D.log "update"
    in
        case msg of
            SelectTab idx ->
                ( { model | selectedTab = idx }, Cmd.none )

            CustomersTab msg ->
                ( model, Cmd.none )

            EmptyTab msg ->
                ( model, Cmd.none )

            SignInMsg ->
                ( {model | accountModel = Just ({name ="joe"})} , Cmd.none )

            SignUpMsg ->
                ( model ,Cmd.none )


tabSet =
    [ ( "Customers", "cust", .customersModel >> CustomersView.view >> Html.map CustomersTab )
    , ( "Orders", "ord", .ordersModel >> EmptyView.view >> Html.map EmptyTab )
    , ( "Inventory", "invt", .inventoryModel >> EmptyView.view >> Html.map EmptyTab )
    ]


tabViews =
    List.map (\( _, _, v ) -> v) tabSet |> Array.fromList


tabNames =
    ( tabSet |> List.map (\( x, _, _ ) -> text x), [] )


urlTabs =
    List.indexedMap (\idx ( _, x, _ ) -> ( x, idx )) tabSet |> Dict.fromList


tabUrls =
    List.map (\( _, x, _ ) -> x) tabSet |> Array.fromList


e404 _ =
    div []
        [ Html.h1 [] [ text "404" ]
        ]

view model =
    case model.accountModel of
        Nothing ->
            Layout.view2 SignInView.view0 []

        Just account ->
            viewForAccount model

viewForAccount model =
    let
        currentTab =
            (Array.get model.selectedTab tabViews |> Maybe.withDefault e404) model

        tabLinks =
            List.map (\( name, href_, _ ) -> Html.a [ href ( "#" ++ href_) ] [ text name ]) tabSet
    in
        Layout.view2 currentTab tabLinks


subscriptions model =
    Sub.none


urlOf : Model -> String
urlOf model =
  "#"  ++ (Array.get model.selectedTab tabUrls |> Maybe.withDefault "")


delta2url : Model -> Model -> Maybe Routing.UrlChange
delta2url model1 model2 =
    if model1.selectedTab /= model2.selectedTab then
        { entry = Routing.NewEntry
        , url = urlOf model2
        }
            |> Just
    else
        Nothing


location2messages : Navigation.Location -> List Msg
location2messages location =
    let
        a =
            D.log "location2messages -> location" location
    in
        [ case String.dropLeft 1 location.hash of
            "" ->
                SelectTab 0

            x ->
                Dict.get x urlTabs
                    |> Maybe.withDefault -1
                    |> SelectTab
        ]
