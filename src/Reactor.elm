module Reactor exposing (update, view, init, subscriptions)

import Html exposing (div, text, a, h1, img)
import Html.Attributes exposing (href, style, src, class, alt, id)
import Msg exposing (..)
import Debug as D exposing (log)
import Route
import Pages.Home
import Views.Home as HomeView exposing (view)
import Bootstrap.Grid as Grid
import Bootstrap.CDN as CDN
import Bootstrap.Navbar as Navbar


type PageApp
    = BlankApp
    | NotFound
    | HomeApp Pages.Home.Model


type PageState
    = Loaded PageApp
    | LoadingFrom PageApp


type alias Model =
    { pageState : PageState
    , navBarState : Navbar.State
    }



--
-- Init establishes the basic data structure.
--


init location =
    let
        b =
            D.log "location" location

        c =
            D.log "function" "init"

        (navBarState, navBarCmd) = Navbar.initialState NavbarMsg
        
    in
        (setRoute
            (Route.fromLocation location)
            ({ pageState = Loaded BlankApp
              , navBarState = navBarState
            })
            navBarCmd
        )



-- Update is a triggered by a Msg which represents
-- a particular side-effect generated by an actor
--


update msg model =
    let
        a =
            D.log "model" model

        b =
            D.log "msg" msg

        c =
            D.log "update"
    in
      case msg of
          SetRoute route ->
              setRoute route model Cmd.none
          NavbarMsg state ->
              ({ model | navBarState = state } ,Cmd.none)


viewBlank =
    a [ href "#blank" ] [ text "Mu" ]


viewHome =
    a [ href "#home" ] [ text "Home" ]


viewNotFound =
    a [ href "#aouaoeuaoeuaoeu123" ] [ text "NotFoundError" ]



--
-- view is invoked by updates to the model
--


navLinks =
    [ div []
        [ viewBlank
        , text " | "
        , viewHome
        , text " | "
        , viewNotFound
        ]
    ]


navbar navState =
    Navbar.config NavbarMsg
      |> Navbar.withAnimation
      |> Navbar.brand
          [ href "#" ]
          [ img
              [ src "assets/syntax_sugar.png"
              , class "d-inline-block align-top"
              , alt "syntax-sugar-logo"
              ]
              []
          ]
      |> Navbar.items
          [ 
            Navbar.itemLink [href "#"] [ text "Customers"]
          ]
      |> Navbar.view navState


layout model main =
    Grid.container []
        [
         Grid.row [] [Grid.col [id "mainNav"] [ navbar model.navBarState ] ]
         , Grid.row []
            [ Grid.col [] [ main ]
            ]
        ]


view model =
    let
        headerBuilder html =
            div [ style [ ( "display", "flex" ), ( "position", "absolute" ), ( "top", "0" ), ( "bottom", "0" ), ( "left", "0" ), ( "right", "0" ) ] ]
                [ div [ style [ ( "font-size", "3em" ), ( "margin", "auto" ) ] ] (List.append [ html ] navLinks)
                ]
    in
      case model.pageState of
          Loaded page ->
              case page of
                  HomeApp homeModel ->
                      layout model (headerBuilder (HomeView.view homeModel))

                  BlankApp ->
                      headerBuilder (text "This is the Page that represents non-thing => mu")

                  NotFound ->
                      headerBuilder (text "This is the Not Found html page")

          LoadingFrom page ->
              headerBuilder (text ("Transition from'" ++ (toString page) ++ "'"))


subscriptions model =
    Sub.none


setRoute maybeRoute model navBarCmd =
      case maybeRoute of
          Nothing ->
              ( { model | pageState = Loaded NotFound }, navBarCmd )

          Just (Route.HomeRoute) ->
              ( { model | pageState = Loaded (HomeApp Pages.Home.init) }, navBarCmd )

          Just (Route.BlankRoute) ->
              ( { model | pageState = Loaded BlankApp }, navBarCmd )
