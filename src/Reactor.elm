module Reactor exposing (update, view, init, subscriptions)

import Html exposing (div, text, a)
import Html.Attributes exposing (href, style)
import Msg exposing (..)
import Debug as D exposing (log)
import Route
import Pages.Home


type PageApp
    = BlankApp
    | NotFound
    | HomeApp Pages.Home.Model


type PageState
    = Loaded PageApp
    | LoadingFrom PageApp


type alias Model =
    { pageState : PageState
    }



--
-- Init establishes the basic data structure.
--


init location =
    let
        b =
            D.log "location" location

        c =
            D.log "function" "init"
    in
        (setRoute
            (Route.fromLocation location)
            { pageState = Loaded BlankApp
            }
        )



-- Update is a triggered by a Msg which represents
-- a particular side-effect generated by an actor
--


update msg model =
    let
        a =
            D.log "model" model

        b =
            D.log "msg" msg

        c =
            D.log "update"
    in
        case msg of
            SetRoute route ->
                setRoute route model


viewBlank =
    a [ href "#blank" ] [ text "Mu" ]


viewHome =
    a [ href "#home" ] [ text "Home" ]


viewNotFound =
    a [ href "#aouaoeuaoeuaoeu123" ] [ text "NotFoundError" ]



--
-- view is invoked by updates to the model
--


navLinks =
    [ div []
        [
         viewBlank
        , text " | "
        , viewHome
        , text " | "
        , viewNotFound
       ] 
    ]


view model =
    let
        headerBuilder title =
            div [ style [("display", "flex"), ("position", "absolute"), ("top", "0"), ("bottom", "0"), ("left", "0"), ("right","0") ]] [
                 div [ style [("font-size", "3em"), ("margin","auto")]] (List.append [ text title ] navLinks)
                ]
    in
        case model.pageState of
            Loaded page ->
                case page of
                    HomeApp model ->
                        headerBuilder ("Welcome! You are on the '" ++ model.name ++ "'")

                    BlankApp ->
                        headerBuilder ("This is the Page that represents non-thing => mu")

                    NotFound ->
                        headerBuilder ("This is the Not Found html page")

            LoadingFrom page ->
                headerBuilder ("Transition from'" ++ (toString page) ++ "'")


subscriptions model =
    Sub.none


setRoute maybeRoute model =
    case maybeRoute of
        Nothing ->
            ( { model | pageState = Loaded NotFound }, Cmd.none )

        Just (Route.HomeRoute) ->
            ( { model | pageState = Loaded (HomeApp Pages.Home.init) }, Cmd.none )

        Just (Route.BlankRoute) ->
            ( { model | pageState = Loaded BlankApp }, Cmd.none )
