module Reactor exposing (update, view, init, subscriptions, location2messages, delta2url)

import Html exposing (div, text, a, h1, img, map)
import Html.Attributes exposing (href, style, src, alt)
import Debug as D exposing (log)
import Material
import Material.Options as Options
import Material.Scheme
import Material.Color as MColor
import Material.Typography as Typography
import Material.Layout as Layout
import RouteUrl as Routing
import Navigation
import Dict
import Array
import Empty as EmptyView
import Customers as CustomersView exposing (Msg)


type Msg
    = SelectTab Int
    | CustomersTab CustomersView.Msg
    | EmptyTab EmptyView.Msg
    | Mdl (Material.Msg Msg)


type alias Model =
    { mdl : Material.Model
    , customersModel : CustomerModel
    , ordersModel : EmptyModel
    , inventoryModel : EmptyModel
    , selectedTab : Int
    }


type alias CustomerModel =
    { list : List String
    }


type alias EmptyModel =
    {}


model =
    { mdl = Material.model
    , customersModel = CustomerModel [ "joe", "sue", "betty", "wilma", "frank" ]
    , ordersModel = EmptyModel
    , inventoryModel = EmptyModel
    , selectedTab = 0
    }



--
-- Init establishes the basic data structure.
--


init =
    let
        c =
            D.log "function" "init"
    in
        ( { model
            | mdl =
                Layout.setTabsWidth 1384 model.mdl
                {- elm gives us no way to measure the actual width of tabs. We
                   hardwire it. If you add a tab, remember to update this. Find the
                   new value using:
                   document.getElementsByClassName("mdl-layout__tab-bar")[0].scrollWidth
                -}
          }
        , Layout.sub0 Mdl
        )



-- Update is a triggered by a Msg which represents
-- a particular side-effect generated by an actor
--


update msg model =
    let
        a =
            D.log "model" model

        b =
            D.log "msg" msg

        c =
            D.log "update"
    in
        case msg of
            Mdl msg_ ->
                Material.update Mdl msg_ model

            SelectTab idx ->
                ( { model | selectedTab = idx }, Cmd.none )

            CustomersTab msg ->
                ( model, Cmd.none )

            EmptyTab msg ->
                ( model, Cmd.none )


tabSet =
    [ ( "Customers", "cust", .customersModel >> CustomersView.view >> Html.map CustomersTab )
    , ( "Orders", "ord", .ordersModel >> EmptyView.view >> Html.map EmptyTab )
    , ( "Inventory", "invt", .inventoryModel >> EmptyView.view >> Html.map EmptyTab )
    ]


tabViews =
    List.map (\( _, _, v ) -> v) tabSet |> Array.fromList


tabNames =
    ( tabSet |> List.map (\( x, _, _ ) -> text x), [] )


urlTabs =
    List.indexedMap (\idx ( _, x, _ ) -> ( x, idx )) tabSet |> Dict.fromList


tabUrls =
    List.map (\( _, x, _ ) -> x) tabSet |> Array.fromList


e404 _ =
    div
        []
        [ Options.styled Html.h1
            [ Options.cs "mdl-typography--display-4"
            , Typography.center
            ]
            [ text "404" ]
        ]


view model =
    let
        currentTab =
            (Array.get model.selectedTab tabViews |> Maybe.withDefault e404) model

        stylesheet =
            Options.stylesheet """
            """

        tabLinks =
            List.map (\( name, href, _ ) -> Layout.link [ Layout.href href ] [ text name ]) tabSet

        layout main =
            Layout.render
                Mdl
                model.mdl
                [ Layout.fixedHeader
                , Layout.selectedTab model.selectedTab
                , Layout.onSelectTab SelectTab
                ]
                { header =
                    [ Layout.row []
                        [ Layout.spacer
                        ]
                    , Layout.row [ Options.css "align-items" "flex-start" ]
                        [ Layout.title [] [ img [ alt "syntax-sugar-logo", src "assets/syntax_sugar.png" ] [] ]
                        , Layout.spacer
                        , div [] [ text "Welcome / user banner" ]
                        ]
                    , Layout.row
                        [ Options.css "align-items" "flex-end"
                        ]
                        [ div []
                            [ text "Tasty Code Cakes Banner"
                            ]
                        ]
                    , Layout.row []
                        [ Layout.navigation [] tabLinks
                        ]
                    ]
                , drawer = []
                , tabs = ( [], [] )
                , main = [ stylesheet, main ]
                }
    in
        layout currentTab


subscriptions model =
    Sub.batch
        [ Layout.subs Mdl model.mdl
          --     , Material.subscriptions Mdl model
        ]


urlOf : Model -> String
urlOf model =
    (Array.get model.selectedTab tabUrls |> Maybe.withDefault "")


delta2url : Model -> Model -> Maybe Routing.UrlChange
delta2url model1 model2 =
    if model1.selectedTab /= model2.selectedTab then
        { entry = Routing.NewEntry
        , url = urlOf model2
        }
            |> Just
    else
        Nothing


location2messages : Navigation.Location -> List Msg
location2messages location =
    let
        a =
            D.log "location2messages -> location" location
    in
        [ case String.dropLeft 1 location.pathname of
            "" ->
                SelectTab 0

            x ->
                Dict.get x urlTabs
                    |> Maybe.withDefault -1
                    |> SelectTab
        ]
